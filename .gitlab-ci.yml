stages:
  - deploy
  - test
  - clean
  
deploy:
  stage: deploy
  environment:
    name: $CI_COMMIT_BRANCH
    on_stop: clean
  script:
    - ./get_vars.sh
    - terraform init
    - terraform apply -var-file=config.tfvars -auto-approve -target=module.s3_quotes -target=module.alerts -target=module.dynamodb
    - terraform apply -var-file=config.tfvars -auto-approve

test:
  stage: test
  script:
    - ./get_vars.sh
    - pip3 install -e .
    #- python3 -m pytest test/test_get_quotes.py
    #- python3 -m pytest test/test_html2csv.py
    #- python3 -m pytest test/test_clean_quotes.py
    - python3 -m pytest test/test_events.py
    - python3 -m pytest test/test_discretize.py
    - python3 -m pytest test/test_pricech.py
    - python3 -m pytest test/test_simulator.py
    - python3 -m pytest test/test_hist_simulator.py
    - python3 -m pytest test/test_agent.py

clean:
  stage: clean
  environment:
    name: $CI_COMMIT_BRANCH
    action: stop
  variables:
    GIT_STRATEGY: none
  when: manual
  except:
    - master
    - $CI_DEFAULT_BRANCH
  script:
    - git clone $CI_REPOSITORY_URL temprepo
    - cd temprepo
    - ./get_vars.sh
    - terraform init
    - terraform destroy -var-file=config.tfvars -auto-approve

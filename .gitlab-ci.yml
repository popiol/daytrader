stages:
  - deploy
  - build
  - test
  - clean

deploy_to_aws:
  stage: deploy
  environment:
    name: $CI_COMMIT_BRANCH
    on_stop: clean
  script:
    - ./get_vars.sh
    - terraform init
    - terraform apply -var-file=config.tfvars -auto-approve -target=module.s3_quotes -target=module.alerts
    - terraform apply -var-file=config.tfvars -auto-approve

build_ml_docker:
  stage: build
  script:
    - export AWS_USER_ID=$(aws iam get-user --output text | cut -d":" -f5)
    - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_USER_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
    - docker build docker/ml -t ml
    - docker tag ml ${AWS_USER_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${APP_NAME}_$CI_COMMIT_BRANCH/ml
    - docker push ${AWS_USER_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${APP_NAME}_$CI_COMMIT_BRANCH/ml

test:
  stage: test
  script:
    - ./get_vars.sh
    - pip3 install -e .
    #- python3 -m pytest test/test_get_quotes.py
    #- python3 -m pytest test/test_html2csv.py
    #- python3 -m pytest test/test_clean_quotes.py
    #- python3 -m pytest test/test_events.py
    #- python3 -m pytest test/test_discretize.py
    #- python3 -m pytest test/test_pricech.py
    #- python3 -m pytest test/test_simulator.py
    #- python3 -m pytest test/test_hist_simulator.py
    #- python3 -m pytest test/test_train_init.py
    #- python3 -m pytest test/test_test_model.py
    #- python3 -m pytest test/test_train_model.py

clean:
  stage: clean
  environment:
    name: $CI_COMMIT_BRANCH
    action: stop
  variables:
    GIT_STRATEGY: none
  when: manual
  except:
    - master
    - $CI_DEFAULT_BRANCH
  script:
    - git clone $CI_REPOSITORY_URL temprepo
    - cd temprepo
    - ./get_vars.sh
    - terraform init
    - terraform destroy -var-file=config.tfvars -auto-approve -target=aws_batch_job_queue.main
    - terraform destroy -var-file=config.tfvars -auto-approve
